{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"maxP",
				"maxPeakL"
			],
			[
				"Win",
				"Window_Width"
			],
			[
				"Window",
				"Window_Width"
			],
			[
				"WI",
				"Window_Height"
			],
			[
				"vuP",
				"vuPeakRight"
			],
			[
				"vu",
				"vuPeakRight"
			],
			[
				"WIn",
				"Window_Width"
			],
			[
				"vuPe",
				"vuPeakLeft"
			],
			[
				"Color",
				"COLOR_VUPEAKYELLOW"
			],
			[
				"COLOR",
				"COLOR_VUPEAKRED"
			],
			[
				"vuA",
				"vuAvgRight"
			],
			[
				"vuAg",
				"vuAvgLeft"
			],
			[
				"max",
				"maxSampleL"
			],
			[
				"maxS",
				"maxSampleR"
			],
			[
				"float",
				"float32"
			],
			[
				"Wi",
				"Window_Height"
			],
			[
				"flat",
				"float64"
			],
			[
				"SHR",
				"SHRT_MIN"
			],
			[
				"Wind",
				"Window_Height"
			],
			[
				"W",
				"Window_Height"
			],
			[
				"SDL_S",
				"SDL_Surface"
			],
			[
				"in",
				"insideWaveRect"
			],
			[
				"SDL_P",
				"SDL_PointInRect"
			],
			[
				"target",
				"targetFPS"
			],
			[
				"COLORMAS",
				"COLORMASK_ARGB888"
			],
			[
				"pea",
				"peaksRect"
			],
			[
				"sam",
				"sampleSize"
			],
			[
				"lcM",
				"lcMinCache"
			],
			[
				"wind",
				"Window_Width"
			],
			[
				"WIN",
				"Window_Height"
			],
			[
				"SHRT",
				"SHRT_MAX"
			],
			[
				"curs",
				"cursorRect"
			],
			[
				"Fou",
				"Fourth_WW"
			],
			[
				"num",
				"numSamples"
			],
			[
				"Fourt",
				"Fourth_WH"
			],
			[
				"window",
				"Window_Height"
			],
			[
				"eixt",
				"exit_code"
			],
			[
				"append",
				"append_string"
			],
			[
				"SDL_INT",
				"SDL_INIT_AUDIO"
			],
			[
				"Global",
				"Global_running"
			],
			[
				"Mix_P",
				"Mix_PauseMusic"
			],
			[
				"hexLi",
				"hexListIndex"
			],
			[
				"Nex",
				"NextHexFromMid"
			],
			[
				"HEX",
				"HEXSIDE_M"
			],
			[
				"HEXS",
				"HEXSIDE_UR"
			],
			[
				"SDL_BLEN",
				"SDL_BLENDMODE_NONE"
			],
			[
				"print",
				"printWAVFile"
			],
			[
				"sec",
				"seconds_to_time"
			],
			[
				"bits",
				"bitsPerSample"
			],
			[
				"litt",
				"littleToBig4"
			],
			[
				"buf",
				"buffer4"
			],
			[
				"lit",
				"littleToBig2"
			],
			[
				"WIndow",
				"Window_Width"
			],
			[
				"Widnow",
				"Window_Height"
			],
			[
				"bytes",
				"bytesPerSecond"
			],
			[
				"cha",
				"channels"
			],
			[
				"mu",
				"musicFileName"
			],
			[
				"wav",
				"WAVFile"
			],
			[
				"SDL_BLE",
				"SDL_BLENDMODE_BLEND"
			],
			[
				"SDL_B",
				"SDL_BLENDMODE_NONE"
			],
			[
				"sample",
				"sample_size"
			],
			[
				"SDL_BL",
				"SDL_BLENDMODE_MOD"
			],
			[
				"SDL_Set",
				"SDL_SetSurfaceBlendMode"
			],
			[
				"BLE",
				"SDL_BLENDMODE_BLEND"
			],
			[
				"Mix_M",
				"Mix_VolumeMusic"
			],
			[
				"MIX_M",
				"SDL_MIX_MAXVOLUME"
			],
			[
				"auido",
				"audio_format"
			],
			[
				"smap",
				"sample_size"
			],
			[
				"nee",
				"need_refresh"
			],
			[
				"next",
				"nextHexSide"
			],
			[
				"uint",
				"uint32"
			],
			[
				"Windo",
				"Window_Height"
			],
			[
				"SDL_Render",
				"SDL_RenderClear"
			],
			[
				"inc",
				"increment"
			],
			[
				"Draw",
				"DrawHexToSurface"
			],
			[
				"del",
				"deltax"
			],
			[
				"DrawHe",
				"DrawHexToSurface"
			],
			[
				"fon",
				"fontConsolas24"
			],
			[
				"0xFF",
				"0xFFFFFFFF"
			],
			[
				"text",
				"RenderTextNumberMessage"
			],
			[
				"Ren",
				"RenderTextNumberMessage"
			],
			[
				"SDL",
				"SDL_Color"
			],
			[
				"pixe",
				"pixelFormat"
			],
			[
				"SDL_Rende",
				"SDL_RenderCopy"
			],
			[
				"Hex",
				"HexTextureLined"
			],
			[
				"Winw",
				"Window_Height"
			],
			[
				"SDL_Dest",
				"SDL_DestroyTexture"
			],
			[
				"Gl",
				"Global_paused"
			],
			[
				"0xFFFF",
				"0xFF0000FF"
			],
			[
				"font",
				"fontDroidSansMono24"
			],
			[
				"fontD",
				"fontDroidSansMono32"
			],
			[
				"fontO",
				"fontOxygenMono32"
			],
			[
				"ngg",
				"nggyu2"
			],
			[
				"ticks",
				"ticksElapsedTexture"
			],
			[
				"tick",
				"ticksElapsedTexture"
			],
			[
				"tic",
				"ticksElapsedRect"
			],
			[
				"ticksEl",
				"ticksElapsedRect"
			],
			[
				"play",
				"playIndexSurface"
			],
			[
				"fontA",
				"fontAnaheimRegular32"
			],
			[
				"playIn",
				"playIndexTexture"
			],
			[
				"playInex",
				"playIndexRect"
			],
			[
				"Global_vide",
				"Global_videoClip"
			],
			[
				"black",
				"black240mp4"
			],
			[
				"layout",
				"layoutWindowElements"
			],
			[
				"Global_video",
				"Global_videoClip"
			],
			[
				"free",
				"freeVideoClip"
			],
			[
				"curre",
				"currentTime"
			],
			[
				"anime",
				"anime404mp4"
			],
			[
				"an",
				"anime404webm"
			],
			[
				"av_f",
				"av_frame_free"
			],
			[
				"avfram",
				"av_frame_alloc"
			],
			[
				"av_fra",
				"av_frame_alloc"
			],
			[
				"parent",
				"parentKeyframe"
			],
			[
				"AV_",
				"AV_PICTURE_TYPE_NONE"
			],
			[
				"ani",
				"anime404AME"
			],
			[
				"a",
				"a404test"
			],
			[
				"seekT",
				"seekToOnlyKeyframes"
			],
			[
				"wan",
				"wantedFrame"
			],
			[
				"wa",
				"wantedIndex"
			],
			[
				"AVSEE",
				"AVSEEK_FLAG_BACKWARD"
			],
			[
				"total",
				"totalFrames"
			],
			[
				"pts",
				"ptsList"
			],
			[
				"ptsL",
				"ptsListSorted"
			],
			[
				"_",
				"_ptsListSize"
			],
			[
				"PICT",
				"PICTYPE"
			],
			[
				"avcode",
				"avcodec_decode_video2"
			],
			[
				"pic",
				"pict_type"
			],
			[
				"pict",
				"pict_type"
			]
		]
	},
	"build_system": "Packages/C++/C++ Single File.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 375.0,
		"last_filter": "open",
		"selected_items":
		[
			[
				"open",
				"PackageResourceViewer: Open Resource"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"isnt",
				"Package Control: Install Package"
			],
			[
				"rem",
				"Package Control: Remove Package"
			]
		],
		"width": 450.0
	},
	"console":
	{
		"height": 410.0,
		"history":
		[
			"reload",
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/E/Programs/sublimetext/Data/Packages/User/Default (Windows).sublime-keymap",
		"/E/Code/C/hex/res/test.wav",
		"/E/Code/C/hex/inc/xtrace.h",
		"/E/Code/C/hex/wave.h",
		"/E/Code/C/hex/audio.h",
		"/E/Code/C/hex/handleevents.h",
		"/E/Code/C/hex/res/hex.ico",
		"/E/Code/C/hex/res/res.wav",
		"/E/Programs/sublimetext/Data/Packages/User/hex_viewer.sublime-settings",
		"/E/Programs/sublimetext/Data/Packages/Highlight Build Errors/HighlightBuildErrors.py",
		"/E/Programs/sublimetext/Data/Packages/User/HighlightBuildErrors.sublime-settings",
		"/E/Programs/sublimetext/Data/Packages/sublime-text-2-buildview/commands.py",
		"/E/Code/C/hex/build.bat",
		"/E/Libs/ffmpeg/ffmpegsrc/ffplay.c",
		"/E/Code/C/hex/hex.rc",
		"/E/Code/handmade/code/handmade_generated.h",
		"/E/Code/C/hospital/timer.h",
		"/E/Code/C/hex/inc/SDL/SDL_main.h",
		"/E/Code/C/hex/wulinemacro.cpp",
		"/E/Libs/SDL2/SDL2-(2.0.4)-source/src/render/SDL_render.c",
		"/E/Libs/SDL2/SDL2-(2.0.4)-source/src/render/SDL_sysrender.h",
		"/E/Libs/SDL2/SDL2-(2.0.4)-source/src/render/direct3d/SDL_render_d3d.c",
		"/E/Code/C/hex/inc/datatypes.h",
		"/E/Libs/SDL2/hex/main.cpp",
		"/E/Libs/ffmpeg/ffmpegsrc/ffprobe.c",
		"/C/cmder/config/aliases",
		"/E/Code/C/mouse/util.h",
		"/E/Code/C/mouse/colors.h",
		"/E/Code/C/mouse/audio.h",
		"/C/Users/Alex/Desktop/GDD3400_RTS_DLL/GDD3400_RTS_Lib.dll",
		"/C/Users/Alex/Desktop/GDD3400_RTS_DLL/.vs/GDD3400_RTS/v14/.suo",
		"/E/Code/C/mouse/auido.h",
		"/E/Programs/sublimetext/Data/Packages/User/Preferences.sublime-settings",
		"/E/Code/C/mouse/.gitignore",
		"/E/Code/C/mouse/build.bat",
		"/E/Programs/sublimetext/Data/Packages/User/Batch File.sublime-build",
		"/e/code/c/mouse/inc/sdl2/SDL_rect.h",
		"/E/Programs/sublimetext/Data/Packages/Default/Default (Windows).sublime-keymap",
		"/E/Programs/sublimetext/Data/Packages/User/Owl of Shame.tmTheme",
		"/E/Programs/sublimetext/Data/Packages/User/bh_core.sublime-settings",
		"/E/Programs/sublimetext/Data/Packages/BracketHighlighter/bh_core.sublime-settings",
		"/E/Code/C/mouse/mouse.cpp",
		"/E/Code/Java/linesplit/core/src/com/esw/linesplit/LineSplit.java",
		"/C/Users/Alex/.gitconfig",
		"/E/Code/C/mouse/mouse.sublime-project",
		"/E/Code/C/mouse/xtrace.h",
		"/E/Code/C/mouse/savetodisk.h",
		"/E/Programs/sublimetext/Data/Packages/C++/C.sublime-syntax",
		"/E/Code/C/mouse/bin/lib/avcodec-57.def",
		"/E/Libs/ffmpeg/ffmpeg/lib/bread.def",
		"/E/Libs/ffmpeg/ffmpeg/lib/avcodec-57.def",
		"/E/Libs/ffmpeg/ffmpeg/lib/avdevice-57.def",
		"/E/Libs/ffmpeg/ffmpeg/lib/avfilter-6.def",
		"/E/Libs/ffmpeg/ffmpeg/lib/avformat-57.def",
		"/E/Libs/ffmpeg/ffmpeg/lib/avutil-55.def",
		"/E/Libs/ffmpeg/ffmpeg/lib/postproc-54.def",
		"/E/Libs/ffmpeg/ffmpeg/lib/swresample-2.def",
		"/E/Libs/ffmpeg/ffmpeg/lib/swscale-4.def",
		"/E/Code/C/mouse/begin.bat",
		"/E/Programs/sublimetext/Data/Packages/User/Package Control.sublime-settings",
		"/E/Code/C/win32/win32.cpp",
		"/E/Code/C/mouse/datatypes.h",
		"/E/Code/C/win32/xtrace.h",
		"/E/Code/C/win32/graphics.h",
		"/E/Code/C/engine/src/src",
		"/E/Programs/sublimetext/Data/Packages/Batch File/Batch File.sublime-syntax",
		"/E/Code/C/win32/echo",
		"/E/Code/C/win32/sublime",
		"/E/Code/C/win32/win32",
		"/E/Programs/sublimetext/Data/Packages/BracketHighlighter/Example.sublime-keymap",
		"/E/Programs/sublimetext/Data/Packages/Package Control/Package Control.sublime-settings",
		"/E/Programs/sublimetext/Data/Packages/Better Build System/BetterBuidSystem.py",
		"/C/Users/Alex/Desktop/subl/Data/Packages/C++/C.sublime-syntax",
		"/E/Code/C/main.c",
		"/E/Code/C/main.cpp",
		"/C/Users/Alex/Desktop/subl/Data/Packages/sublime-text-2-buildview/pipe_views.py",
		"/C/Users/Alex/Desktop/subl/Data/Packages/Better Build System/BetterBuidSystem.py",
		"/C/Users/Alex/Desktop/subl/Data/Packages/sublime-text-2-buildview/commands.py",
		"/C/Users/Alex/Desktop/subl/Data/Packages/User/Preferences.sublime-settings"
	],
	"find":
	{
		"height": 36.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"ly",
			"wavFile.data",
			"find_all_results",
			"hex.m",
			"LENGTH",
			"SDL_BLENDMODE",
			".header",
			"header",
			"sample_size",
			"SHOW_MODE_RDFT",
			"colo",
			"( ",
			"IDirect3DDevice9_DrawPrimitiveUP",
			"RenderDrawPoints",
			"SDL_RenderDrawPoints",
			"SDL_CreateRenderer",
			"Pixel",
			"color",
			"totalFrames",
			"frame",
			"Global_play",
			"#ifndef UI_H\n#define UI_H\n\n#include \"video.h\"\n\nstruct ViewRects\n{\n	SDL_Rect background;\n	SDL_Rect timeline;\n};\n\nvoid layoutWindowElements(SDL_Window *window, ViewRects *views, VideoClip *clip)\n{\n	const int bufferSpace = 100;\n\n	int windowWidth, windowHeight, backW, backH, videoW, videoH;\n\n	SDL_GetWindowSize(window, &windowWidth, &windowHeight);\n\n\n	// Find the nearest 16x9 (STC) resolution to fit the composite views into\n	// STC: Need to make the aspect ratio the aspect ratio of the output composition.\n	if(windowWidth < )\n	for(int w = 0, h = 0; \n	    w < (windowWidth - bufferSpace) && h < (windowHeight - (bufferSpace * 2));\n	    w += 16, h += 9)\n	{\n		backW = w;\n		backH = h;\n	}\n\n	// Fit the current view background into an output aspect ratio in the top middle\n	views->background.w = backW;\n	views->background.h = backH;\n	views->background.x = (windowWidth / 2) - (backW / 2);\n	views->background.y = (windowHeight / 2) - (backH / 2) - (bufferSpace);\n\n	// (??? STC ???) <\n	// If the clip is bigger than the back views then we just resize it to be the back view\n	// and \"fit it to frame\". Otherwise we keep the Global_VideoClip at it's original size.\n	// NOTE: We may want to test this, perhaps clips that are bigger than the size of the wanted\n	// composite should be clipped outside of the composite... \n	if(clip->vfile->width > backW || clip->vfile->height > backH)\n	{\n		// Find the nearest rectangle to fit the clip's aspect ratio into the view backgrounds\n		for(int w = 0, h = 0; \n		    w <= backW && h <= backH; \n		    w += clip->vfile->aspectRatioW, h += clip->vfile->aspectRatioH)\n		{\n			videoW = w;\n			videoH = h;\n		}\n	}\n	else\n	{\n		videoW = clip->vfile->codecCtx->width;\n		videoH = clip->vfile->codecCtx->height;\n	}\n	// (??? STC ???)) >\n\n	// Put the composite clip view on the left hand side and center it in the composite \n	// view background\n	clip->videoRect.w = videoW;\n	clip->videoRect.h = videoH;\n	clip->videoRect.x = views->background.x + \n	((views->background.w - clip->videoRect.w) / 2);\n	clip->videoRect.y = views->background.y + \n	((views->background.h - clip->videoRect.h) / 2);\n\n	// Put the timeline clip view in the bottom part of the screen under the video\n	views->timeline.x = 10;\n	views->timeline.y = views->background.h + 20;\n	views->timeline.w = (windowWidth) - (10 * 2);\n	views->timeline.h = (windowHeight - views->timeline.y) - 10;\n}\n\nvoid setVideoClipPosition(SDL_Window *window, VideoClip *clip, int x, int y)\n{\n	int width, height;\n	SDL_GetWindowSize(window, &width, &height);\n	if(x < 0 || y < 0 || x > width || y > height) return;\n	clip->videoRect.x = x;\n	clip->videoRect.y = y;\n}\n\nvoid setRenderColorAlpha(SDL_Renderer *r, tColor c, uint8 alpha)\n{\n	SDL_SetRenderDrawColor(r, c.r, c.b, c.g, alpha);\n}\n\nvoid setRenderColor(SDL_Renderer *r, tColor c)\n{\n	SDL_SetRenderDrawColor(r, c.r, c.b, c.g, c.a);\n}\n\n#endif",
			"process_frame",
			"do_read_frames",
			"process_frame",
			"do_read_frames",
			"count_frames",
			"nframes",
			"AV_TIME",
			"currentView",
			"clip",
			"#if 0",
			"clip",
			"->",
			"enum",
			"resizeAllWindowElements",
			"clip0",
			"clip->destRect",
			"clip->",
			"framecount",
			"ctrl+l",
			"pFrame",
			"rad",
			"pCodec",
			"pCodecCtx",
			"pCodecCtxOrig",
			"pFormatCtx",
			"fprintf",
			"ABGR",
			"win32G",
			"win32_ge",
			"display",
			"xtrace",
			"sleepIsGranular",
			"State"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"point",
			"",
			"r, g, b, a",
			"nframes",
			"result",
			"vfile",
			"vfileClip",
			"Global_VideoClip",
			".",
			"Global_VideoClip",
			"r",
			"r.",
			"r->",
			"r",
			"codec",
			"codecCtx",
			"videoCodecCtx",
			"avFormatCtx",
			"printf"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 37.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			],
			[
				2,
				0,
				3,
				1
			]
		],
		"cols":
		[
			0.0,
			0.29015625,
			0.65140625,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": false,
	"output.exec":
	{
		"height": 31.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.hex_viewer_inspector":
	{
		"height": 115.0
	},
	"pinned_build_system": "Packages/User/Batch File.sublime-build",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"hean",
				"handleevents.h"
			],
			[
				"hex",
				"hex.cpp"
			],
			[
				"x",
				"inc\\xtrace.h"
			],
			[
				"xt",
				"inc\\xtrace.h"
			],
			[
				"au",
				"audio.h"
			],
			[
				"wa",
				"wave.h"
			],
			[
				"aui",
				"audio.h"
			],
			[
				"hand",
				"handleevents.h"
			],
			[
				"wav",
				"wave.h"
			],
			[
				"color",
				"inc\\colors.h"
			],
			[
				"han",
				"handleevents.h"
			],
			[
				"dra",
				"drawing.h"
			],
			[
				"h",
				"hex.cpp"
			],
			[
				"colo",
				"inc\\colors.h"
			],
			[
				"he",
				"hex.cpp"
			],
			[
				"bu",
				"build.bat"
			],
			[
				"buil",
				"build.bat"
			],
			[
				"bui",
				"build.bat"
			],
			[
				"dr",
				"drawing.h"
			],
			[
				"build",
				"build.bat"
			],
			[
				"timer",
				"timer.h"
			],
			[
				"colors",
				"inc\\colors.h"
			],
			[
				"main",
				"inc\\SDL\\SDL_main.h"
			],
			[
				"data",
				"inc\\datatypes.h"
			],
			[
				"moue",
				"mouse.cpp"
			],
			[
				"vide",
				"video.h"
			],
			[
				"mosu",
				"mouse.cpp"
			],
			[
				"mouse",
				"mouse.cpp"
			],
			[
				"v",
				"video.h"
			],
			[
				"ui",
				"ui.h"
			],
			[
				"util",
				"util.h"
			],
			[
				"co",
				"colors.h"
			],
			[
				"video",
				"video.h"
			],
			[
				"mosue",
				"mouse.cpp"
			],
			[
				"mo",
				"mouse.cpp"
			],
			[
				"uitl",
				"util.h"
			],
			[
				"vid",
				"video.h"
			],
			[
				"m",
				"mouse.cpp"
			],
			[
				"vi",
				"video.h"
			],
			[
				"ut",
				"util.h"
			],
			[
				"col",
				"colors.h"
			],
			[
				"mou",
				"mouse.cpp"
			],
			[
				"uit",
				"util.h"
			],
			[
				"",
				".gitignore"
			],
			[
				"colr",
				"colors.h"
			],
			[
				"mous",
				"mouse.cpp"
			],
			[
				"git",
				".gitignore"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 184.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
